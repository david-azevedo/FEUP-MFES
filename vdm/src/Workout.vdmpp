class Workout
types

values

instance variables
	protected route: Types`Route;
	protected startTime: Types`Timestamp;
	protected endTime: Types`Timestamp;
	protected threshold: nat;
	
	inv Math`timeToSeconds(startTime) <= Math`timeToSeconds(endTime);
	
operations
	
	--Check if a workout is finished
	public isFinished: () ==> bool
	isFinished() == is subclass responsibility;
	
	--Receives a new GPS Position
	public newGPSPosition: Types`Point ==> ()
	newGPSPosition(point) == is subclass responsibility;
	
	--Returns a distance
	public getDistance: () ==> nat
	getDistance() == is subclass responsibility;
	
	--Returns last point
	public getLastPoint: () ==> [Types`Point]
	getLastPoint() == is subclass responsibility;
	
	--Returns the route of an task
	public getRoute: () ==> Types`Route
	getRoute() == 
	(
		return route;
	);
	
	--Sets the time to finish the circuit
	public finish: Types`Timestamp ==> ()
	finish (time) ==
	(
		endTime := time
	)
	post endTime = time;
	
	
	--Calculates the average velocity 
	public calculateVelocity: () ==> real
	calculateVelocity() == return getDistance() / Math`timeToSeconds(calculateTime())
	post endTime = endTime~ and startTime = startTime~;
	
	public calculateTime: () ==> Types`Timestamp
	calculateTime() ==
	(
		return Math`secondsToTime(abs (Math`timeToSeconds(endTime) - Math`timeToSeconds(startTime)));
	)
	post endTime = endTime~ and startTime = startTime~;
	
	--Checks if outside of threshold
	protected outsideOfThreshold: Types`Point ==> bool
	outsideOfThreshold (point) ==
	(
		if getLastPoint() = nil then
			return false;
		return Math`distance(point, getLastPoint()) > threshold;
	);
	
	--Checks if inside of threshold
	protected insideOfThreshold: Types`Point ==> bool
	insideOfThreshold (point) ==
	(
		if getLastPoint() = nil then
			return false;
		return Math`distance(point, getLastPoint()) <= threshold;
	);
	
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Workout