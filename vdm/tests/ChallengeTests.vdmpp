class ChallengeTests is subclass of Test
/*
Classes which tests all of the operations from the class
Challenge and respetive subclasses (DistanceChallenge and RouteChallenge).
*/
instance variables

	-- Global is where all the users must be created
	private global: Global := new Global();
	private distChallenge: [DistanceChallenge] := nil;
	private routeChallenge: [RouteChallenge] := nil;

operations

	public test: () ==> ()
	test() == (
		
		dcl david: [User] := nil; 
		dcl joao: [User] := nil;
		dcl route1: [Types`Route] := mk_Types`Route("Route1", [mk_Types`Point(0,0),mk_Types`Point(0,25)]);
		dcl route2: [Types`Route] := mk_Types`Route("Route2", [mk_Types`Point(0,0),mk_Types`Point(0,25),mk_Types`Point(0,50),mk_Types`Point(25,50)]);
		dcl workout: [Workout] := new WorkoutNew(Math`secondsToTime(10), route1);
		
		-- Adding users to the system
		global.addUser("David");
		global.addUser("Joao");
		
		-- Storing the user in temporary variables for later use
		david := global.getUser("David");
		joao := global.getUser("Joao");
		
		-- Creating a distance challenge where david is the owner
		distChallenge := new DistanceChallenge("IronMan",david,50);
		
		-- Asserting constructor
		assertTrue(distChallenge.distance = 50);
		assertTrue(distChallenge.getOwner() = david);
		assertTrue(distChallenge.getParticipants() = { david });
		
		-- This workout (25 meters) does not complete the challenge of 50 meters
		assertTrue(distChallenge.completed(workout) = false);
		
		-- Adding a new point to the workout to complete the 50 meters
		workout.newGPSPosition(mk_Types`Point(0,50));
		
		-- Now the workout has reached 50 meters in length and so it completes this challenge
		assertTrue(distChallenge.completed(workout) = true);
		
		-- Testing add participant to a challenge
		distChallenge.addParticipant(david,joao);
		
		-- Checking if the participant was added and the owner remains the same
		assertTrue(card distChallenge.getParticipants() = 2);
		assertTrue(distChallenge.getOwner() = david);
		assertTrue(distChallenge.getParticipants() = { david, joao });
		
		-- Testing remove self operation
		distChallenge.removeSelf(joao);
		
		-- This test will fail because the owner can't remove himself from the challenge (Uncomment to test)
		-- distChallenge.removeSelf(david);
		
		-- Checking if every value is as expected and the user was removed
		assertTrue(card distChallenge.getParticipants() = 1);
		assertTrue(distChallenge.getOwner() = david);
		assertTrue(distChallenge.getParticipants() = { david });
		
		-- Adding user joao again so that david can remove him
		distChallenge.addParticipant(david, joao);
		
		-- David as the owner now removes joao from the participants
		distChallenge.removeParticipant(david, joao);
		
		-- Checking if every value is as expected
		assertTrue(card distChallenge.getParticipants() = 1);
		assertTrue(distChallenge.getOwner() = david);
		assertTrue(distChallenge.getParticipants() = { david });
		
		-- Testing Route Challenge
		routeChallenge := new RouteChallenge("BostonMarathon", joao, route2);
		
		-- Sanity checks
		assertTrue(routeChallenge.getOwner() = joao);
		assertTrue(routeChallenge.getParticipants() = { joao });
		assertTrue(routeChallenge.route = route2);
		assertTrue(routeChallenge.name = "BostonMarathon");
		
		-- This workout still does not complete the challenge
		assertTrue(routeChallenge.completed(workout) = false);
		
		-- Adding the last GPS point of the route to complete challenge
		workout.newGPSPosition(mk_Types`Point(25,50));
		
		-- Challenge should now be completed
		assertTrue(routeChallenge.completed(workout) = true);
		
		-- Adding one more GPS point to the route
		workout.newGPSPosition(mk_Types`Point(25,75));
		
		-- Challenge should still be completed even though the workout was longer
		assertTrue(routeChallenge.completed(workout) = true);
	);

end ChallengeTests