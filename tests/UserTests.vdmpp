class UserTests is subclass of Test
types

values

instance variables
	private global: Global := new Global();
	
operations
	
	--Tests the functionality of the class User
	public test: () ==> ()
	test () ==
	(
		testFriendship();
		testWorkouts();
	);
	
	public testFriendship: () ==> ()
	testFriendship () ==
	(
		dcl user: [User] := nil;
		dcl stringList: Types`StringSeq := [];
		--Fill Global With Users()
		global.clear();
		
		global.addUser("Jo�o Ferreira");
		global.addUser("David Azevedo");
		
		--Retrive User:
		user := global.getUser("Jo�o Ferreira");
		
		--Add Friend
		user.addFriend("David Azevedo");
		
		stringList:= user.listFriends();
		assertTrue(len stringList = 1);
		assertTrue("David Azevedo" in set elems stringList);
		
		--Remove Friend
		
		user.removeFriend("David Azevedo");
		
		stringList:= user.listFriends();
		assertTrue(len stringList = 0);
		
	);
	
	public testWorkouts: () ==> ()
	testWorkouts() ==
	(
		dcl user : [User] := nil;
		
		--Clear users
		global.clear();
		
		--Setup User
		global.addUser("Carlos");
		
		user:= global.getUser("Carlos");
		
		--Routes and tops must be empty
		assertTrue( elems user.listRoutes() = {});
		assertTrue( dom user.getTop() = {});
		assertTrue( dom user.getRoutesPerformed() = {});
		
		--Start a new Workout
		
		user.startWorkout("Route1", 20);
		
		--Routes and tops still must be empty
		assertTrue( elems user.listRoutes() = {});
		assertTrue( dom user.getTop() = {});
		assertTrue( dom user.getRoutesPerformed() = {});
		
		--Create Route
		user.updateByGPS(mk_Types`Point(0,0));
		
		user.updateByGPS(mk_Types`Point(0,40));
		
		--Finish
		user.finishCurrentWorkout(40);
		
		--Routes and tops still must be empty
		assertTrue( elems user.listRoutes() = {"Route1"});
		assertTrue( rng user.getTop() = {20});
		assertTrue( rng user.getRoutesPerformed() = {1});
		
		--Repeat route
		user.startWorkout("Route1", 20);
		
		--Create Route
		user.updateByGPS(mk_Types`Point(0,0));
		
		user.updateByGPS(mk_Types`Point(0,40));
		
		--Finish with better time
		user.finishCurrentWorkout(30);
		
		--Routes and tops still must be empty
		assertTrue( elems user.listRoutes() = {"Route1"});
		assertTrue( rng user.getTop() = {10});
		assertTrue( rng user.getRoutesPerformed() = {2});
		
		
		--Start new route
		user.startWorkout("Route2", 20);
		
		--Create Route
		user.updateByGPS(mk_Types`Point(0,0));
		
		user.updateByGPS(mk_Types`Point(0,40));
		
		--Cancel
		user.cancelCurrentWorkout();
		
		--Routes and tops still must be empty
		assertTrue( elems user.listRoutes() = {"Route1"});
		assertTrue( rng user.getTop() = {10});
		assertTrue( rng user.getRoutesPerformed() = {2});
		
		
		
		
		
		
		
		
		
		global.clear();
	);
	

functions
traces
end UserTests